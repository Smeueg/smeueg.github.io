#!/bin/bash
# @name smeueger
# @brief An interactive script to set up a Smeueg's personalized Linux system
# @description Easy installation/setup for:
# * Smeueg's Dotfiles (https://github.com/Smeueg/Dotfiles)
# * JetBrainsMono Nerd Font
# * A GTK theme and icons (base16-default-dark)
# * Flathub
# * TMPFS (on /tmp)
# * A swapfile (on /swapfile 1Gb)
# * auto-cpufreq(1)
# * rustup(1)
# * Tap to click on a touchpad


# @section Exit codes
exit_code_library_not_found=127
exit_code_command_not_found=127
exit_code_permission_denied=1
exit_code_file_not_found=2

# @section Helper Variables
tab=$(printf "\t")
newline="
"

# @section Color Variables
color_info=2
color_selected=4
color_unselected=239
color_header=7
color_box=5
color_error=1
color_warning=3

# @section Helper Functions

# Print a formatted error message
# @arg $1 string The message
# @stderr The error message
error() {
    printf "[\033[38;5;${color_error}mERR\033[m] %s\n" "${1}"
}

# Print a formatted warning message
# @arg $1 string The message
# @stdout The error message
warn() {
    printf "[\033[38;5;${color_warning}mWARN\033[m] %s\n" "${1}"
}

# Print a formatted info message
# @arg $1 string The message
# @stdout The info message
info() {
    printf "[\033[38;5;${color_info}mINFO\033[m] %s\n" "${1}"
}

# Prints a header
# @arg $1 string The text
# @stdout The header
header() {
    printf "\033[4;38;5;${color_header}m| %b |\033[m\n" "${1}"
}

# @description Returns the minimum betwen two integers
# @arg $1 integer The first integer
# @arg $2 integer The second integer
# @stdout The minimum between the two integers
min() {
    if [ ${1} -lt ${2} ]; then
        printf "%d\n" ${1}
    else
        printf "%d\n" ${2}
    fi
}

# @description Returns the maximum betwen two integers
# @arg $1 integer The first integer
# @arg $2 integer The second integer
# @stdout The maximum between the two integers
max() {
    if [ ${1} -gt ${2} ]; then
        printf "%d\n" ${1}
    else
        printf "%d\n" ${2}
    fi
}

# @description Duplicates a string multiple times
# @arg $1 The string to duplicate
# @arg $2 The amount of times to duplicate
# @stdout Outputs the created string
make_string() {
    i=0
    while [ ${i} -lt ${2} ]; do
        str="${str}${1}"
        i=$((i + 1))
    done
    printf "%s" "${str}"
}

# @description Split's a string into multiple lines
# @arg $1 string The string to split
# @arg $2 integer The maximum length of one line
# @stdout The created string
split_string() {
    limit=${2}
    string=
    remainder=
    set -- $@
    while [ ${#string} -lt ${limit} ]; do
        string="${string} ${1}"; shift
    done
    printf "%s\n" "${string# }"
    while [ "${2}" ]; do
        remainder="${remainder} ${1}"
        shift
    done
    if [ "${remainder}" ]; then
        split_string "${remainder# }" ${limit}
    fi
}

# Print an error if a dependency isn't installed
# @arg $@ string A list of dependencies
# @stderr The error messages
# @exitcode 0 If no dependencies are missing
# @exitcode 127 (exit_code_command_not_found) If a dependency is missing
ensure_deps() {
    exit_code=0
    for dep in "${@}"; do
        [ "$(command -v ${dep})" ] && continue
        error "${1} is not installed"
        exit_code=${exit_code_command_not_found}
    done
    return ${exit_code}
}

# Print an error if a file doesn't exist
# @arg $@ string A list of dependencies
# @stderr The error messages
# @exitcode 0 If no dependencies are missing
# @exitcode 127 (exit_code_command_not_found) If a dependency is missing
ensure_files() {
    exit_code=0
    for file in "${@}"; do
        [ -f "${file}" ] && continue
		error "The file '${file}' does not exist"
        exit_code=${exit_code_file_not_found}
    done
    return ${exit_code}
}

# @description Checks whether a list of libraries are installed
# @arg $@ string The list of libraries to check
ensure_libs() {
    exit_code=0
    for lib in "${@}"; do
        output=$(cc -l"${lib}" 2>&1)
        if [ "${output##*undefined reference to \`main\'*}" ]; then
            error "'lib${lib}' is not installed"
            exit_code=${exit_code_library_not_found}
        fi
    done
	return ${exit_code}
}

# @description Checks whether `curl` or `wget` is installed
# @set download_function string
# @noargs
# @exitcode 0 If 'curl' or 'wget' is installed
# @exitcode 127 If 'curl' or 'wget' is installed
check_for_curl_or_wget() {
	for p in curl wget; do
		[ "$(command -v ${p})" ] && return 0
	done
	return ${exit_code_command_not_found}
}

# @description Downloads a page from the internet
# @arg $1 string The url
# @arg $2 string The file destination
download() {
	url=${1}
	file=${2}
	if [ "$(command -v curl)" ]; then
		curl -Ls "${1}" -o "${2}"
	elif [ "$(command -v curl)" ]; then
		wget -q "${1}" -O "${2}"
	fi
}

# @description Reads one character
# @noargs
# @stdout "u" For up
#         "d" For down
#         "l" For left
#         "r" For right
#         "e" For enter
#         "q" For quit
read_char() {
    saved_tty_settings=$(stty -g)
    escape_sequence=$(printf '\033')
    stty -icanon -echo

    char=$(dd bs=1 count=1 status=none)
    if [ "${char}" = "${escape_sequence}" ]; then
        char=$(dd bs=2 count=1 status=none)
        char=${char#?}
    fi

    stty "${saved_tty_settings}"

    case ${char} in
        "${tab}") printf "t\n";; # Tab
        "k"|"A") printf "u\n";; # Up
        "j"|"B") printf "d\n";; # Down
        "l"|"C") printf "r\n";; # Right
        "h"|"D") printf "l\n";; # Left
        ""|" ") printf "e\n";; # Enter
        "q") printf "q\n";; # Quit
    esac
}

# @description Modifies or creates ~/.config/gtk-3.0/settings.ini to set a
# setting
# @arg $1 string The setting to modify
# @arg $2 string The value to set
set_gtk_setting() {
    setting="${1}"
    value="${2}"
    file="${HOME}/.config/gtk-3.0/settings.ini"

    ! [ -f "${file}"  ] && printf "[Settings]\n" > "${file}"

    settings_already_set=false
    while IFS= read line; do
        if ! [ "${line%%${setting}=*}" ]; then
            settings_already_set=true
            break
        fi
    done < "${file}"

    if ${settings_already_set}; then
        sed -i "s/${setting}=.*/${setting}=${value}/" "${file}"
    else
        printf "%s=%s\n" "${setting}" "${value}" >> "${file}"
    fi
}


# @description Get the directory of a path
# @arg $1 string The path
get_dir() {
    path=${1}

    if ! [ "${path##*/}" ]; then
        path=${path%/}
    fi

    printf "%s\n" "${path%/*}"
}

# @section UI Functions

# @description Sets up the terminal for UI use
# It uses an alternate buffer and hides the cursor
setup_terminal() {
    printf "%b"\
           "\033[?1049h"\
           "\033[?25l"\
           "\033[2J"
}

# @description Restores the terminal from UI use
restore_terminal() {
    printf "%b"\
           "\033[?1049l"\
           "\033[?25h"
}

# @description Create a box
# @arg $1 integer The width of the box
# @arg $@ string The lines to display in the box
box() {
    terminal_width=$(tput cols)
    terminal_height=$(tput lines)
    box_width=${1}
    box_height=$(($#+1))
    left_padding="\033[$(((terminal_width - box_width) / 2))C"
    top_padding="\033[$(((terminal_height - box_height) / 2))B"
    horizontal_bar=$(make_string '─' $((box_width - 2)))
    shift
    printf "\033[H"
    printf "%b" "${top_padding}"

    # Create the roof
    printf "%b\033[38;5;${color_box}m┌%s┐\033[m\n"\
           "${left_padding}"\
           "${horizontal_bar}"

    # Fill the lines
    for line in "" "${@}" ""; do
        printf "%b%$(($box_width - 1))s%b│\033[m\r%b%b│\033[m  %b\n"\
               "${left_padding}"\
               ""\
               "\033[38;5;${color_box}m"\
               "${left_padding}"\
               "\033[38;5;${color_box}m"\
               "${line}"
    done

    # Create the floor
    printf "%b\033[38;5;${color_box}m└%s┘\033[m\n"\
           "${left_padding}"\
           "${horizontal_bar}"
}


# #description Clears the screen if the terminal dimensions changed
# @arg $1 integer The old width
# @arg $2 integer The old height
box_refresh() {
    if [ "${1}" -ne "$(tput cols)" ] || [ "${2}" -ne "$(tput lines)" ]; then
        printf "\033[2J"
    fi
}
# @description Ask a yes or no question
# @arg $1 string The question
# @exitcode 0 If the user agreed
# @exitcode 1 If the user didn't agree
ask() {
    # question=$(split_string "${1}" 30)
    question=${1}
    box_width=$(max 26 $((${#question} + 6)))
    escape_selected="\033[48;5;${color_selected}m\033[4m"
    escape_unselected="\033[48;5;${color_unselected}m"
    escape_reset="\033[m"
    middle_padding=$(make_string " " $((box_width - 6 - 18)))
    old_ifs=${IFS}
    exit_code=0
    while true; do
        old_width=$(tput cols)
        old_height=$(tput lines)
        if [ ${exit_code} -eq 0 ]; then # If Yes is selected
            y_no_str="${escape_selected}   Yes   ${escape_reset}"
            y_no_str="${y_no_str}${middle_padding}"
            y_no_str="${y_no_str}${escape_unselected}   No   ${escape_reset}"
        else
            y_no_str="${escape_unselected}   Yes   ${escape_reset}"
            y_no_str="${y_no_str}${middle_padding}"
            y_no_str="${y_no_str}${escape_selected}   No   ${escape_reset}"
        fi
        setup_terminal
        IFS=${newline}
        box ${box_width} ${question} "" "${y_no_str}"
        IFS=${old_ifs}
        case $(read_char) in
            "l") exit_code=0
                 ;;
            "r") exit_code=1
                 ;;
            "e") return ${exit_code};;
        esac
        box_refresh ${old_width} ${old_height}
    done
}


# @section Item Functions

# @description Parse arguments to become an item
# @arg $@ string The pair of text and function names, i.e.:
#   `item "Dotfiles:dotfiles" "Fonts:fonts" "GTK & Icons:gtk_icons"`
item() {
    printf "%s\n" "$@"
}


# @description Toggle an item
# @arg $1 The list of items
# @arg $2 The index of the item to toggle
toggle_item() {
    index=${2}
    count=0

    old_ifs=${IFS}
    IFS=${newline}
    set -- ${1}

    items=
    for line in ${@}; do
        count=$((count + 1))
        if [ ${count} -eq ${index} ]; then
            if ! [ "${line%%\**}" ]; then
                printf "%s\n" "${line#?}"
            else
                printf "*%s\n" "${line}"
            fi
        else
            printf "%s\n" "${line}"
        fi
    done
    items=${items#?}
    IFS=${old_ifs}
}


# @description Choose items from a list of items
# @arg $1 string The prompt
# @arg $2 string The list of items
# @set REPLY
choose_multiple_item() {
    prompt=${1}
    shift
    old_ifs=${IFS}
    IFS=${newline}
    items=
    for line in "${@}"; do
        items="${items}${newline}${line}"
        len=$((len + 1))
    done
    items=${items#?}

    chosen=1
    chosen_cc=1
    while true; do
        box_width=44
        old_height=$(tput lines)
        old_width=$(tput cols)
        string=
        count=0
        continue="  Continue  "
        for item in ${items}; do
            count=$((count + 1))
            if ! [ "${item%%\**}" ]; then
                item="[x] ${item#?}"
            else
                item="[ ] ${item}"
            fi
            if [ ${count} -eq ${chosen} ]; then
                string="${string}${newline}\033[1;38;5;4m  ${item%:*}  \033[m"
            else
                string="${string}${newline}  ${item%:*}"
            fi
        done
        continue="\033[1;7;38;5;${color_unselected}m  Continue  \033[m"
        cancel="\033[1;7;38;5;${color_unselected}m  Cancel  \033[m"
        if [ ${chosen} -gt ${count} ]; then
            if [ ${chosen_cc} -eq 1 ]; then
                cancel="\033[1;7;38;5;${color_selected}m  Cancel  \033[m"
            else
                continue="\033[1;7;38;5;${color_selected}m  Continue  \033[m"
            fi
        fi
        continue="$(make_string " " $((box_width - 6 - 10 - 12)))${continue}"
        string=${string#?}
        box ${box_width}\
            "\033[4;38;5${color_header}m${prompt}\033[m"\
            ""\
            ${string}\
            ""\
            "${cancel}${continue}"
        case $(read_char) in
            "u") chosen_cc=1; chosen=$((chosen - (chosen > 1)));;
            "d") chosen_cc=1; chosen=$((chosen + (chosen <= count)));;
            "l") [ ${chosen} -gt ${count} ] && chosen_cc=1;;
            "r") [ ${chosen} -gt ${count} ] && chosen_cc=2;;
            "e") if [ ${chosen} -gt ${count} ]; then
                     if [ ${chosen_cc} -eq 1 ]; then
						 REPLY=
                         break
                     elif ask "Are you sure?"; then
                         REPLY=$(toggle_item "${items}" 0)
						 break
                     fi
                 else
                     items="$(toggle_item "${items}" ${chosen})"
                     chosen=$((chosen + (chosen < ${count})))
                 fi
                 ;;
            "q") break;;
        esac
        box_refresh ${old_width} ${old_height}
    done
    IFS=${old_ifs}
}


# @description Choose an item from a list of items
# @arg $1 string The prompt
# @arg $2 string The list of items
choose_single_item() {
    prompt=${1}
    shift
    items=
    old_ifs=${IFS}
    IFS=${newline}
    for line in ${@}; do
        items="${items}${newline}${line}"
        len=$((len + 1))
    done
    items=${items#?}

    chosen=1
    while true; do
        REPLY=
        box_width=44
        old_height=$(tput lines)
        old_width=$(tput cols)
        string=
        count=0
        for item in ${items}; do
            count=$((count + 1))
            if [ ${count} -eq ${chosen} ]; then
                string="${string}${newline}\033[1;38;5;${color_selected}m  ${item%:*}  \033[m"
            else
                string="${string}${newline}  ${item%:*}"
            fi
        done
        if [ ${chosen} -gt ${count} ]; then
            cancel="\033[1;7;38;5;${color_selected}m  Cancel  \033[m"
        else
            cancel="\033[1;7;38;5;${color_unselected}m  Cancel  \033[m"
        fi
        cancel="$(make_string " " $(((box_width - 16 - 3) / 2)))${cancel}"
        string=${string#?}
        box ${box_width}\
            "\033[4;38;5;${color_header}m${prompt}\033[m"\
            ""\
            ${string}\
            ""\
            "${cancel}"
        case $(read_char) in
            "u") chosen=$((chosen - (chosen > 1)));;
            "d") chosen=$((chosen + (chosen <= count)));;
            "e") count=0
                 for item in ${items}; do
                     count=$((count + 1))
                     if [ ${count} -eq ${chosen} ]; then
                         REPLY="${item}"
                         break 2
                     fi
                 done
                 REPLY=
                 break
                 ;;
        esac
        box_refresh ${old_width} ${old_height}
    done
    IFS=${old_ifs}
}



# @section Check, run, setup functions
# @noargs
setup_desktop() {
    items=$(item "Dotfiles:dotfiles" "Fonts:fonts" "GTK & Icons:gtk_icons")
    setup_terminal
    choose_multiple_item "Which ones would you like to setup?" "${items}"
    restore_terminal
    for item in ${REPLY}; do
        [ "${item%%\**}" ] && continue
		item_name=${item%:*}
		item_name=${item_name#\*}
		header "Setting Up: ${item_name}"
		${item#*:} || error "Failed to setup ${item_name}"
		printf "\n\n"
    done
    exit 0
}

dotfiles() {
    ensure_deps git || return 1
    dots_dir="${HOME}/.local/dots/"
    dots_url="https://github.com/Smeueg/Dotfiles.git"

    if [ -d "${dots_dir}" ]; then
        if ! prompt "'${dots_dir}' already exists, overwrite it?"; then
            printf "Won't overwrite '%s'\n" "${dots_dir}"
            return
        fi
    fi

    if ! git clone --progress --bare --depth 1 "${dots_url}" "${dots_dir}"; then
        error "Failed to clone dotfiles repository from '${dots_url}'"
        return 1
    fi

    if ! git --git-dir="${dots_dir}" config status.showUntrackedFiles no; then
        warn "Failed to configure local dotfiles repo to only show tracked files"
    fi

    files=$(git --git-dir="${dots_dir}" ls-tree --full-tree --name-only -r HEAD)
    for file in ${files}; do
        if [ -f "${HOME}/${file}" ]; then
            backup_dir="${HOME}/DotsBackup/${file}"
            backup_dir=${backup_dir%/*}
            printf "Backing up '%s' to '%s'\n" \
                   "${HOME}/${file}" \
                   "${backup_dir=}"
            if ! mkdir -p "${backup_dir}"; then
                error "Failed to create directory '${backup_dir}'"
                return 1
            fi

            if ! mv "${HOME}/${file}" "${backup_dir}"; then
                error "Failed to move '${HOME}/${file}' to '${backup_dir}'"
                return 1
            fi
        fi
    done

    if ! git --git-dir="${dots_dir}" --work-tree="${HOME}" checkout; then
        error "Failed to checkout local dotfiles repo to '~/'"
    fi
}

fonts() {
    check_for_curl_or_wget || return 1
    ensure_deps tar mkdir || return 1
    if [ "${TERMUX_VERSION}" ]; then
        info "termux detected"
        font_url="https://github.com/ryanoasis/nerd-fonts/raw/refs/heads/master/patched-fonts/JetBrainsMono/Ligatures/Regular/JetBrainsMonoNerdFontMono-Regular.ttf"
        download "${font_url}" "${HOME}/.termux/font.ttf"
        termux-reload-settings
    else
        font_dir="${HOME}/.local/share/fonts/"
	    font_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download"
        for font in "JetBrainsMono" "Gohu"; do
            printf "Downloading '%s Nerd Font'\n" "${font}"
            mkdir -pv "${font_dir}/${font}NerdFont"
            download "${font_url}/${font}.tar.xz" - |
                tar -xJf - -C "${font_dir}/${font}NerdFont"
        done
        set_gtk_setting "gtk-font-name" "JetBrainsMono Nerd Font Mono 11"
    fi
}

gtk_icons() {
    ensure_deps git || return 1
    dir_theme="${HOME}/.local/share/themes"
    dir_icons="${HOME}/.local/share/icons"
    url_theme="https://github.com/smeueg/base16-default-dark"
    url_icons="https://github.com/PapirusDevelopmentTeam/papirus-icon-theme"

    mkdir -pv "${dir_theme}" "${dir_icons}"

    info "Getting GTK theme from: ${url_theme}"
    git clone "${url_theme}" "${dir_theme}/${url_theme##*/}" --depth 1

    info "Getting GTK icons from: ${url_icons}"
    git clone "${url_icons}" "/tmp/${url_icons##*/}" --depth 1
    mv "/tmp/${url_icons##*/}/Papirus" "${dir_icons}"
    rm -rf "/tmp/${url_icons##*/}"

    set_gtk_setting "gtk-theme-name" "base16-default-dark"
    set_gtk_setting "gtk-icon-theme-name" "Papirus"
}


# @section System Setup
setup_system() {
	if ! [ -w / ]; then
		restore_terminal
		error "You must have escalated privilages to setup your system"
		exit ${exit_code_permission_denied}
	fi

    items=$(item "Ly:ly" "TMPFS:tmpfs" "Swapfile:swapfile"\
                 "AutoCPUFreq:autocpufreq" "Tap To Click (Touchpad):touchpad"\
				 "Fix Cursor:fix_cursor")
	choose_multiple_item "Which ones would you like to setup?" "${items}"
	restore_terminal

	for item in ${REPLY}; do
		item_name=${item%:*}
		item_name=${item_name#/*}
		[ "${item%%\**}" ] && continue
		header "Setting Up ${item_name}"
		${item#*:} || error "Failed to set up ${item_name}"
		printf "\n\n"
	done

	exit
}

tmpfs() {
	ensure_files /etc/fstab || return 1

    while read -r line; do
		[ "${line}" ] || continue
		[ "${line%%*tmpfs */tmp *tmpfs*}" ] && continue
		error "tmpfs: '/tmp/' is already mounted as tmpfs in '/etc/fstab'"
		return 1
	done < /etc/fstab

	entry="tmpfs /tmp tmpfs rw,nodev,nosuid,size=512M 0 0"
	if ! printf "%s\n" "${entry}" >> /etc/fstab; then
		error "Failed to add '/tmp/' as tmpfs to '/etc/fstab'"
		return 1
	fi
}

swapfile() {
	ensure_deps dd chmod mkswap swapon || return 1
	ensure_files /etc/fstab || return 1
	if ! dd if=/dev/zero of=/swapfile bs=1M count=1024 status=progress; then
		error "Failed to create '/swapfile' (dd)"
		return 1
	fi
    if ! chmod 0600 /swapfile; then
        error "Failed to change file permissions for '/swapfile' (chmod)"
        return 1
    fi
	if ! mkswap -U clear /swapfile; then
        error "Failed to set up '/swapfile' as swap (mkswap)"
        return 1
    fi
	if ! swapon /swapfile; then
        warn "Failed to enable '/swapfile' as swap (swapon)"
        return 1
    fi
	if ! printf "/swapfile none swap defaults 0 0\n" >> /etc/fstab; then
        error "Failed to add '/swapfile' to '/etc/fstab'"
		return 1
    fi
}

autocpufreq() {
	ensure_deps git || return 1
    repo_url="https://github.com/AdnanHodzic/auto-cpufreq"
    repo_dir="/tmp/auto-cpufreq/"
    if ! git clone "${repo_url}" "${repo_dir}"; then
        error "Failed to clone '${repo_url}' to '${repo_dir}'"
        return 1
    fi

    if "${repo_dir}/auto-cpufreq-installer"; then
        info "Don't forget to enable the 'auto-cpufreq' service" 
    fi
}

touchpad() {
	file="/etc/X11/xorg.conf.d/99-synaptics-overrides.conf"

    ensure_deps Xorg || return 1;
    mkdir -p "$(get_dir "${file}")" || return 1

	printf "%s\n" \
		   'Section  "InputClass"' \
		   '    Identifier  "touchpad overrides"' \
		   '    Driver "libinput"' \
		   '    MatchIsTouchpad "on"' \
		   '    Option "Tapping" "on"' \
		   '    Option "TappingButtonMap" "lmr"' \
		   'EndSection' \
		   > "${file}"
}

ly() {
    ensure_deps zig git sed || return 1
	ensure_libs pam xcb || return 1

	repo_url="https://github.com/fairyglade/ly"
    repo_dir="/tmp/ly"

    if ! git clone --recurse-submodules "${repo_url}" "${repo_dir}"; then
        error "Failed to clone '${repo_url}' to '${repo_dir}'"
        return 1
    fi

    if ! (cd "${repo_dir}" && zig build); then
        error "Failed to run 'zig build' on '${repo_dir}'"
        return 1
    fi

    if ! (cd "${repo_dir}" && zig build installexe -Dinit_system=systemd); then
        error "Failed to run 'zig build installexe -Dinit_system=systemd' on '${repo_dir}'"
        return 1
    fi

    systemctl enable ly.service --force
    systemctl disable getty@tty2.service

    sed -i 's/^bg = .*/bg = 0x00202020/' /etc/ly/config.ini
    sed -i 's/^fg = .*/fg = 0x00D0D0D0/' /etc/ly/config.ini
    sed -i 's/^border_fg = .*/border_fg = 0x00D0D0D0/' /etc/ly/config.ini
    sed -i 's|^xinitrc = .*|xinitrc = ~/.config/X11/xinitrc|' /etc/ly/config.ini
}

fix_cursor() {
	if ! [ -d /usr/share/icons/default ]; then
		error "Nothing to be fixed, /usr/share/icons/default doesn't exist"
		return 1
	fi
	mv /usr/share/icons/default/ /usr/share/icons/default.backup/
}


# @section Programs Installations
install_programs() {
    items=$(item "Rustup:rustup" "BlueTUI:bluetui")
    setup_terminal
    choose_multiple_item "Which ones would you like to setup?" "${items}"
    restore_terminal
    for item in ${REPLY}; do
        [ "${item%%\**}" ] && continue
		item_name=${item%:*}
		item_name=${item_name#\*}
        header "Installing ${item_name}"
        info "Installed ${item_name}"
        ${item#*:} || error "Failed to install ${item_name}"
        printf "\n\n"
    done
    exit 0
}

bluetui() {
    check_for_curl_or_wget || return 1

    if [ -d "${HOME}/.local/bin/" ]; then
        mkdir -pv "${HOME}/.local/bin/" || return 1
    fi

    url=""
    suffix=""
    api_url="https://api.github.com/repos/pythops/bluetui/releases/latest"
    json=$(download "${api_url}" -)
    case $(uname --machine) in
	    x86_64)
            suffix="x86_64-linux-gnu"
	        ;;
	    arm*)
            suffix="aarch64-linux-gnu"
		    ;;
        *)
            err "Unknown architecture"
            return 1;
    esac

    while read -r line; do
        [ "${line}" ] || continue
        [ "${line%%*\"browser_download_url\":*\"*${suffix}\"}" ] && continue
        url=${line}
        url=${url%\"*}
        url=${url##*\"}
    done << EOF
${json}
EOF
    download "${url}" "${HOME}/.local/bin/bluetui"
    chmod +x "${HOME}/.local/bin/bluetui"
}

rustup() {
	check_for_curl_or_wget || return 1
	if download "https://sh.rustup.rs" - | sh; then
		return 1
	fi
}

# @section Main Function
main() {
	if [ -w / ]; then
		setup_terminal
		if ! ask "You are running the script with elevated privilages, do you want to continue?"; then
			restore_terminal
			exit 1
		fi
	fi
	original_items=$(item "Setup The Desktop:setup_desktop"\
                          "Setup The System:setup_system"\
                          "Install A Program:install_programs")

    while true; do
        setup_terminal
        choose_single_item "What would you like to do?" "${original_items}"
        if [ "${REPLY}" ]; then
            "${REPLY#*:}"
            restore_terminal
        else
            break
        fi
    done
    restore_terminal
}

main
